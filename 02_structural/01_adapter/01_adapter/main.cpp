#include <iostream>
#include <memory>
#include <map>
#include <geometry.h>

void DrawPoints(std::vector<Point>::iterator start, std::vector<Point>::iterator end)
{
    for (auto i = start; i != end; i++) {
        std::cout << *i << " ";
    }
    std::cout << "\n";
}

struct LineToPointAdapter
{
    typedef std::vector<Point> Points;

    LineToPointAdapter(Line const& line) {
        int left = std::min(line.start.x, line.end.x);
        int right = std::max(line.start.x, line.end.x);
        int top = std::min(line.start.y, line.end.y);
        int bottom = std::max(line.start.y, line.end.y);
        int dx = right - left;
        int dy = line.end.y - line.start.y;

        if (dx == 0) {
            // vertical
            for (int y = top; y <= bottom; y++) {
                points.emplace_back(Point{ left, y });
            }
        }
        else if (dy == 0) {
            // horizontal
            for (int x = left; x <= right; x++) {
                points.emplace_back(Point{ x, top });
            }
        }
    }

    virtual Points::iterator begin() { return points.begin(); }
    virtual Points::iterator end() { return points.end(); }

private:
    Points points;
};

int main(int argc, char** argv)
{
    std::vector<std::shared_ptr<VectorObject>> vectorObjects{
        std::make_shared<VectorRectangle>(10, 10, 5, 5),
        std::make_shared<VectorRectangle>(10, 10, 5, 5), // same line regenerated by adapter
        std::make_shared<VectorRectangle>(30, 30, 10, 10)
    };

    for (auto const& obj : vectorObjects) {
        std::cout << "draw object: \n";
        for (auto const& line : *obj) {
            std::cout << "draw line: ";
            LineToPointAdapter lpo{ line };
            DrawPoints(lpo.begin(), lpo.end());
        }
        std::cout << std::endl;
    }

    return 0;
}